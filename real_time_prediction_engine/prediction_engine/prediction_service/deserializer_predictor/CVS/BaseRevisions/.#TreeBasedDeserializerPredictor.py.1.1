from com.highradius.prediction_service.deserializer_predictor.context.PipelinePredictionContext import PipelinePredictionContext
from com.highradius.prediction_service.service_helper import ServiceHelper
from com.highradius.common_utils.HRCLogger import HRCLogFactory
from com.highradius.prediction_service.configurations import Constants
logger=HRCLogFactory.getLog()
class TreeBasedDeserializerPredictor(PipelinePredictionContext):
    """
    Scikit learn Algorithms Deserializer and Predictor
    """
    def __init__(self):
        self.dataFrame=None

    def getLeafNumber(self,dataFrame):
        self.leafNumber =self.loadedPipeLine.named_steps[Constants.PIPELINE_NAMED_STEP_MODEL].apply(self.loadedPipeLine.named_steps[Constants.PIPELINE_NAMED_STEP_MAPPER].transform(dataFrame))

    def performPredictions(self,dataFrame,pipelineFilename):
        try:
            self.dataFrame = dataFrame
            predContext = TreeBasedDeserializerPredictor()
            predContext.pipeLineFileName = pipelineFilename
            ServiceHelper.fetchFileviaRemoteAPI(predContext.pipeLineFileName)
            predContext.pipeline_load()
            predContext.pipeline_predictLabels(dataFrame)
            predContext.pipeline_probabilityDistribution(dataFrame)
            predContext.getLeafNumber(dataFrame)
            logger.debug("Caching: " + str(ServiceHelper.load_pipeline_cache.cache_info()))
            return predContext
        except KeyError as e:
            msg = "Missing key in the model file. Please check the input features or modify the file. Prediction failed due to: " +str(type(e).__name__)+" "+str(e)
            logger.error(msg)
            raise Exception(msg)
        except ValueError as e:
            msg = "Null/NAN/infinity or incompatible data. Prediction failed due to: " + str(type(e).__name__)+" "+str(e)
            logger.error(msg)
            raise Exception(msg)
        except Exception as e:
            msg = "Failed to deserialize or Predict Tree Pipeline Based Models: " +str(type(e).__name__)+" "+str(e)
            logger.error(msg)
            raise Exception(msg)
